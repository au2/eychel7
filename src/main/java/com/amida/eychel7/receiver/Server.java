package com.amida.eychel7.receiver;

import java.util.Map;

import com.amida.eychel7.Config;

import ca.uhn.hl7v2.HL7Exception;
import ca.uhn.hl7v2.HapiContext;
import ca.uhn.hl7v2.app.Connection;
import ca.uhn.hl7v2.app.ConnectionListener;
import ca.uhn.hl7v2.app.HL7Service;
import ca.uhn.hl7v2.protocol.ReceivingApplicationExceptionHandler;

public class Server {
	public static class RSConnectionListener implements ConnectionListener {
		@Override
		public void connectionReceived(Connection theC) {
			System.out.println("New connection received: " + theC.getRemoteAddress().toString());
		}

		@Override
		public void connectionDiscarded(Connection theC) {
			System.out.println("Lost connection from: " + theC.getRemoteAddress().toString());
		}
	}

	public static class RSExceptionHandler implements ReceivingApplicationExceptionHandler {

		/**
		 * Process an exception.
		 *
		 * @param theIncomingMessage  the incoming message. This is the raw message
		 *                            which was received from the external system
		 * @param theIncomingMetadata Any metadata that accompanies the incoming
		 *                            message. See
		 *                            {@link ca.uhn.hl7v2.protocol.Transportable#getMetadata()}
		 * @param theOutgoingMessage  the outgoing message. The response NAK message
		 *                            generated by HAPI.
		 * @param theE                the exception which was received
		 * @return The new outgoing message. This can be set to the value provided by
		 *         HAPI in <code>outgoingMessage</code>, or may be replaced with another
		 *         message. <b>This method may not return <code>null</code></b>.
		 */
		@Override
		public String processException(String theIncomingMessage, Map<String, Object> theIncomingMetadata,
				String theOutgoingMessage, Exception theE) throws HL7Exception {
			return theOutgoingMessage;
		}
	}

	private HL7Service server;

	public App addApp(String key) {
		App app = new App();
		String[] pieces = key.split("_");
		server.registerApplication(pieces[0], pieces[1], app);
		return app;
	}

	public void start() throws Exception {
		if (server == null) {
			Config config = Config.get();

			HapiContext context = config.getContext();
			server = context.newServer(config.getPort(), config.getUseTls());

			server.registerConnectionListener(new RSConnectionListener());
			server.setExceptionHandler(new RSExceptionHandler());
		}
		if (!server.isRunning()) {
			server.startAndWait();
		}
	}

	public void stop() {
		server.stopAndWait();
	}

	public void clear() throws Exception {
		if (server.isRunning()) {
			server.stopAndWait();
			server = null;
		}
	}
}
